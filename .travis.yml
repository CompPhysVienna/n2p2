dist: bionic

sudo: false

language: python

python:
    - "3.6"

branches:
  only:
    # Build all branches (but not gh-pages)
    - /.*/
    #- master

addons:
  apt:
    packages:
      ########
      # DOCS #
      ########
      # Use default doxygen (1.8.11) on "xenial" (The doxygen version on "trusty" was too old (1.8.6)).
      - doxygen
      # Generating graphs with doxygen requires dot.
      - graphviz
      # Generating formulae with doxygen requires latex and dvips.
      - texlive-latex-base
      # Generating formulae with doxygen requires gs.
      - ghostscript
      #########
      # BUILD #
      #########
      # MPI
      - openmpi-bin
      - libopenmpi-dev
      # BLAS
      - libblas3
      - libblas-dev
      # Eigen library
      - libeigen3-dev
      # GSL library
      - libgsl-dev
      #########
      # TESTS #
      #########
      # Boost Test for C++ testing
      - libboost-test-dev
      # Boost Filesytem for C++ testing
      - libboost-filesystem-dev
      # Coverage for C++
      - lcov

before_install:
  # Set doxygen environment variables.
  #- export DOXYGEN_VER=1_8_14
  #- export DOXYGEN_TAR=https://github.com/doxygen/doxygen/archive/Release_${DOXYGEN_VER}.tar.gz
  #- export DOXYGEN_DIR=doxygen-Release_${DOXYGEN_VER}
 
install:
  - pip install sphinx
  - pip install sphinx_rtd_theme
  #- pip install breathe
  #- pip install exhale
  - pip install cython
  - pip install pytest
  - pip install pytest-cov
  - pip install coverage==4.5.4

before_script:
  # Remember directory.
  - export REPO_DIR=$(pwd)
  # Need to manually compile doxygen.
  #- wget -O - ${DOXYGEN_TAR} | tar -xz -C ${TMPDIR-/tmp}
  #- cd ${TMPDIR-/tmp}/${DOXYGEN_DIR} && mkdir build && cd build && cmake -G "Unix Makefiles" .. && make
  #- export PATH="${TMPDIR-/tmp}/${DOXYGEN_DIR}/build/bin:$PATH"

script:
  - cd ${REPO_DIR}
  - cd src
  - make doc
  # Prevent GitHub Jekyll to interfere with Sphinx theme.
  - touch ../doc/sphinx/html/.nojekyll
  # C++ build and tests
  - make MODE=test -j
  - make MODE=test lammps-nnp
  - cd ../test/
  - make cpp
  - cd cpp
  - make coverage
  # Python build and tests
  - cd ../../src/
  - make pynnp MODE=test
  - cd ../test/
  - make python

after_success:
  - cd ${REPO_DIR}/test/cpp/ && rm *.gcda *.gcno
  - cd ${REPO_DIR}
  - bash <(curl -s https://codecov.io/bash) -f ${REPO_DIR}/test/cpp/tests.info -F cpp -c || echo "Codecov did not collect coverage reports"
  - cd ${REPO_DIR}/test/python/
  - bash <(curl -s https://codecov.io/bash) -F python -c || echo "Codecov did not collect coverage reports"

deploy:
  provider: pages
  skip_cleanup: true
  local_dir: doc/sphinx/html
  github_token: $GH_REPO_TOKEN
  on:
    all_branches: true
    #branch: master
